I"É<h2 id="what-about-non-linear-relationships">What about non-linear relationships?</h2>
<ul>
  <li>Trick: transform data according to basis functions</li>
  <li>Polynomial basis function:</li>
  <li>Gaussian basis function: a sum of Gaussian bases. Does not directly supported by sklearn but we will write one by ourselves.</li>
</ul>

<p><img src="nonlin.png" alt="" /></p>

\[y = a_0 + a_1x_1 +a_2x_2+a_3x_3+...\]

<h2 id="linear-regression-sample-code">Linear Regression Sample Code</h2>
<ul>
  <li>Linear-Regression</li>
  <li>x[:, np.newaxis] =&gt; make it as <font color="red">column vector</font> by inserting an axis along second dimension</li>
  <li>np.linspace(0, 10, 1000): generate 1000 numbers between 0 and 10</li>
  <li>numpy.random.rand(n,m): randomly generate numbers between <font color="red">[0,1)</font> to fill n*m matrix</li>
  <li>How you define a functionâ€™s coefficient: y = 0.5 + np.dot(X, [1.5, -2., 1.]) =&gt; [1.5, -2., 1.] is the coefficient for x1, x2, and x3.</li>
  <li>fit_transform: Generate polynomial and interaction features: [a, b], the degree-2 polynomial features are [\(1, a, b, a^2, ab, b^2\)].</li>
  <li>N degree polynomial means the highest degree of term x.</li>
  <li>make_pipeline: Construct a Pipeline from the given estimators. In the example, we define the <font color="red">basis function</font> and <font color="red">regression method</font>.</li>
</ul>

<table>
  <tbody>
    <tr>
      <td>Â </td>
      <td>Â </td>
      <td><a href="../../">Index</a></td>
      <td>Â </td>
      <td>Â </td>
      <td><a href="../../">Prev</a></td>
      <td>Â </td>
      <td>Â </td>
      <td><a href="lin-reg4/">Next</a></td>
      <td>Â </td>
      <td>Â </td>
    </tr>
  </tbody>
</table>
:ET